import sys
#sys.path.remove('/opt/ros/kinetic/lib/python2.7/dist-packages')
import cv2
import numpy as np
import time
import math
from scipy.spatial import distance as dist
from scipy.stats import linregress
import csv
from imutils.video import WebcamVideoStream
import imutils
from ImageAnalyse import Analyser

class ImageCapture(object):

	def __init__(self):

		# Define these parameters for different package type.
		self.pinNumber=20
		self.xSize=510
		self.xDSize=470
		self.ySize=440
		self.yDSize=390
		self.xOff=50
		self.yOff=35
		self.pinRange=90
		self.thresholdPin = 180
		self.thresholdLetter = 175
		self.xadj=20
		self.yadj=48
		
		self.cap = WebcamVideoStream(src=0).start()

		#ROIs in the format of (x1,y1,x2,y2)
		self.centerLetteringZone = (230, 110, 360, 170)
		self.topPinRowZone = (0, 0,self.xDSize,90)
		self.botPinRowZone = (0, self.yDSize-90, self.xDSize,self.yDSize)
		self.BLPinZone = (0, 0, 200 ,self.pinRange)
		self.URPinZone = (0, self.yDSize-self.pinRange, 200, self.yDSize)		
		self.raw = np.float32()
		self.binaryPin = np.float32()
		self.binaryLettering = np.float32()
		self.debug=True

	def findOC(self,img):
		#Find all contour in image mask away the body 
		cv2.rectangle(img,(0 ,100),(640, 480),0,thickness=cv2.FILLED)
		im2, contours, hierarchy = cv2.findContours(img, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
		contours = np.array(contours)
		boxes = []
		
		for cnt in contours:
			area = cv2.contourArea(cnt)
			perimeter =cv2.arcLength(cnt,True)
			rect = cv2.minAreaRect(cnt)
			box = cv2.boxPoints(rect)
			box = np.int0(box)	
			#print area		
			if(area >250 and area <450 and perimeter <100):
				boxes.append(box)
				#print area
		boxes = np.array(boxes)
		boxavr=[]

		# Merge four coordinate of the rectagle into 1
		for box in boxes:
			if self.debug == True:			
				cv2.drawContours(img,[box],-1,(128,0,128),2)
				cv2.imshow('contour',img)
				cv2.waitKey(50)
			#print box
			packet=((box[0,0]+box[1,0]+box[2,0]+box[3,0])/4,(box[0,1]+box[1,1]+box[2,1]+box[3,1])/4)
			packet=np.array(packet)
			if packet[1] >self.yadj :
				boxavr.append(packet)
		boxavr=np.array(boxavr)
		last =len(boxavr)
		print last
		if  last !=20:
			cv2.waitKey(5000)
		if (last <20) :
			newbox =((40,60),(570,60),(40,370),(570,370))
			#print newbox
			return np.array(newbox)
		xSorted=boxavr[np.argsort(boxavr[:, 0]), :]
		#print xSorted
		if( xSorted[0,1] <xSorted[1,1]):
			bl=xSorted[0]
			tl=xSorted[1]
		else:
			bl=xSorted[1]
			tl=xSorted[0]
		if( xSorted[last-1,1] >xSorted[last-2,1]):
			tr=xSorted[-1]
			br=xSorted[-2]
		else:
			tr=xSorted[-2]
			br=xSorted[-1]		
		newbox=(bl,br,tr,tl)
		newbox=np.array(newbox)	
		
		return newbox

	
	# This function will capture and then extract only the image of the device
	# Run this function when we are certain a device is present in the spocket.
	def captureExtract(self):
		#colored image
		img_raw = self.cap.read()

		# crop image to proper size
		img=img_raw[self.yOff:self.yOff+self.ySize,self.xOff:self.xOff+self.xSize]
		
		#conversion to greyscale
		gray_raw = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)		

		#application of gaussian filter 
		blur = cv2.GaussianBlur(gray_raw,(5,5),0)

		# Determine threshold for B/W transformation
		center=blur[0:400,0:600]
		
		#cv2.imshow('tt',center)
		self.thresholdPin=center.mean()+80
		self.thresholdLetter=center.mean()+55

		#print center.mean()
		ret1,th1 =cv2.threshold(blur,self.thresholdLetter,255,cv2.THRESH_BINARY)
		binaryPin = np.float32(th1)

		# Check for any object within the viewing area, if not return untreated image	
		center=binaryPin[220:260,300:340]
		top=binaryPin[20:60,300:340]
		bot=binaryPin[340:380,300:340]
		
		if top.mean()<20 or bot.mean()<20:
			self.raw = img
			self.gray=gray_raw
			self.binaryPin = binaryPin
			self.binaryLettering  = self.cropROI(self.centerLetteringZone ,binaryPin)
			return gray_raw,binaryPin,binaryPin

		ret1,th1 =cv2.threshold(blur,self.thresholdPin,255,cv2.THRESH_BINARY)
		binaryPin = np.float32(th1)

		# Find square that belong to upper level of the pin
		bw_image = np.uint8(binaryPin)
		(bl,br,tr,tl)=self.findOC(bw_image)

		#calculate rotation
		xdiff,ydiff=br-bl
		#print xdiff,ydiff
		if ydiff==0:
			angle=0
		else:	
			angle=np.arctan2(ydiff,xdiff)*180/np.pi	

		if (angle >5 or angle <-5):
			angle=0
		#print angle
		# Now rotate image
		cols,rows = gray_raw.shape
		M= cv2.getRotationMatrix2D((rows,cols),angle,1)
		gray_rot=cv2.warpAffine(blur,M,(rows,cols))

		# Find contour again 
		oldbox=(bl,br,tr,tl)
		oldbox=np.array(oldbox)
		ret1,th1 =cv2.threshold(gray_rot,self.thresholdPin,255,cv2.THRESH_BINARY)
		binaryPin = np.float32(th1)
		bw_image = np.uint8(binaryPin)
		(bl,br,tr,tl)=self.findOC(bw_image)

		# Now the new boundary is found crop the new image to proper size		
		final_raw=gray_rot[bl[1]-self.yadj:bl[1]-self.yadj+self.yDSize,bl[0]-self.xadj:bl[0]-self.xadj+self.xDSize]

		ret1,th1 =cv2.threshold(final_raw,self.thresholdPin,255,cv2.THRESH_BINARY)
		binaryPin = np.float32(th1)
		cv2.rectangle(binaryPin,(0 ,90),(640, 310),0,thickness=cv2.FILLED)
		ret1,th1 =cv2.threshold(final_raw,self.thresholdLetter,255,cv2.THRESH_BINARY)
		binaryLettering = np.float32(th1)
		#cv2.imshow('bw',binaryPin)
		#self.raw = img
		self.raw = img
		self.gray=final_raw
		self.binaryPin = binaryPin
		self.binaryLettering  = self.cropROI(self.centerLetteringZone ,binaryLettering)

		return final_raw,binaryPin,binaryLettering

	def cropROI(self, ROI,img):
		return img[ROI[1]:ROI[3],ROI[0]:ROI[2]]	

	def getExtImageSet(self):
		self.captureExtract()
		topPinRowBin = self.cropROI(self.topPinRowZone,self.binaryPin) 
		botPinRowBin = self.cropROI(self.botPinRowZone,self.binaryPin)
		BLPinBin = self.cropROI(self.BLPinZone,self.binaryPin)
		URPinBin = self.cropROI(self.URPinZone,self.binaryPin)

		self.currentImageSet = {}
		self.currentImageSet['topPinRowBin'] 	= 	topPinRowBin
		self.currentImageSet['botPinRowBin'] 	= 	botPinRowBin
		self.currentImageSet['BLPinBin'] 		= 	BLPinBin
		self.currentImageSet['URPinBin'] 		= 	URPinBin
		self.currentImageSet['centerLetteringBin'] = self.binaryLettering 
		return self.currentImageSet

		
if __name__ == "__main__":
	print("starting camera")
	cam = ImageCapture()
	print("starting Display")
	#display = DisplayManager(cam)
	#cam.debug=True
	while True:
		start_time = time.time()
		#(main,binary,letter)=cam.captureBinarizePinsAndLettering()		
		(main,binary,letter)=cam.captureExtract()
		end_time = time.time()
		print("time taken %5.3f" %(end_time-start_time))
		
		cv2.imshow('capture',main)

		temp=cam.cropROI(cam.botPinRowZone ,binary)
		#print cam.botPinRowZone 
		#print cam.topPinRowZone 
		#cv2.imshow('top pin',temp)
		cv2.imshow('rot',binary)
		time.sleep(0.5)
		cv2.waitKey(50)
		pass
	foo.cap.stream.release()
	cv2.destroyAllWindows()
